THE BOX MODEL

Display
-> Include values such as;
       * block-> elements appear as a block element.
       * inline -> elements appear inline to other elements.
       * inline-block -> Allows an element to behave as a block-level element, accepting
all box model properties. However the element is still displayed inline with other elements
and will not begine on a new line by default.
       * none -> This value completely hides an element and render the page as if the element does not exists.
       -> Any element nested within the element will also be hidden.
-> Most elements have a default display property value however those values may be overwritten.

Example; p {
           display: block;
           }

NOTE; -> There is usually a space that exists between two inline block elements. However it can be removed.

  Introduction to the Box Model
-> According to the box model, every element on a page is a rectangular box and may have;
     * width
     * height
     * padding
     * borders
     * margins

Working with the Box Model
-> Every element is a  RECTANGULAR BOX and there are several properties that determine the size of that box.
-> The core of the box is determined by the WIDTH and HEIGHT of an element which may be determined by;
a.) DISPLAY property
b.) contents of the element.
c.) width and height.
-> PADDING and BORDER expand the dimensions of the box outward from the elements width and height.
-> MARGIN then follows the BORDER.

Thus according to Box Model, the total width of an element can be calculated using the formula;
     margin-right + border-right + padding-right + width + padding-left + border-left + margin-left
Whereas, the total height of an element can be calculated using;
margin-top + border-top + padding-top + height + padding-bottom + border-bottom + margin-bottom.

Example;
div {
  border: 6px solid #949599;
  height: 100px;
  margin: 20px;
  padding: 20px;
  width: 400px;
}
Thus total width will be
20 + 6 + 20 + 400 + 20 + 6 + 20 = 492 px;
Total height will be;
20 + 6 + 20 + 100 + 20 + 6 + 20 = 192 px;

A. Width and Height
-> Every element has a default width and height.
-> That may be zero but browsers by default will render every element with size.
-> Depending on how element is displayed, the default width and height may be adequate.
-> If an element is key to the layout of the page, it may require specified width and height 
property values. (just for non-inline elements).

Width
-> The default width of an element depends on its display value.
-> Block-level -> elements have default width of 100% thus consuming the entire horizontal space available.
-> Inline and inline-block elements expand and contract horizontally to accomodate their content.
-> Inline-level elements cannot have a fixed size, thus the width and height properties are only relevant to non-inline elements.

Height
-> The default height of an element is determined by its content .
-> An element will expand and contract vertically as necessary to accomodate its content.
-> To set a specific height for a non-inline element, use the height property.

NOTE; Inline-level elements normally does not accept the width and height properties or the values tied to them.
Whereas block and inline-block elements accept.

B. Margin and Padding
-> Depending on the element, browsers may apply default margins and padding to an element to help with legibility and clarity.
-> The default margins and paddings for these elements may differ from browser to browser and element to element.
-> Therefore the need for CSS resets.

Margin
-> Allows us to set the amount of space that sorrounds an element.
-> Usually fall outside of any border and are completely transparent in color.
NOTE; margin-top and margin-bottom are not accepted by inline-level elements but are accepted by block-level and inline-block elements.

Padding
-> Is very similar to the margin property, however it falls inside the element's border, should an element have a border.

Padding property unlike the margin property works vertically on the inline level elements.

Margin and Padding Declarations
-> The margin and padding properties come in both longhand and shorthand form.
-Example of a shorthand
div {
   margin: 20px; // sets the same value for all the four sides of a rectangle.
}

-> To set one value for the TOP and BOTTOM and another value for LEFT and RIGHT, specify two values; top and bottom first then left and right
Example 
div {
   margin: 10px 20px;// 10 -> TOP and BOTTOM 20 -> LEFT and RIGHT
}

To set unique values for all the four sides of an element, specify those values in the order of top, right, bottom and left (clockwise fashion)

Example 
div {
   margin: 10px 20px 0 15px; // TOP -> RIGHT -> BOTTOM -> LEFT
}

Margin and Padding colors
-> The margin and padding properties are completely transparent and do not accept any color values.
-> Being transparent, though they show the background colors of relative elements.
-> For margins - we see the background color of the  parent element and for padding we see the
background color of the element the padding is applied to.

Borders
-> Borders fall between the padding and margin providing an outline around an element.
-> The BORDER property requires three values; - WIDTH, STYLE and COLOR.
-> Shorthand values for the border property are stated in that order.
-> In longhand, these three values can be broken down into; - useful for changing or overwriting a single border value.
a.) border-width
b.) border-style
c.) border-color

Border styles values;
* solid
* double
* dashed
* dotted
* none

Individual border sides
* border-top
* border-right
* border-bottom
* border-left
-> The values for these properties are the same as those of the border property alone i.e. width, style, color.
-> Additionaly, styles for individual border sides may also be controlled at an even finer level.
e.g we can specify the width alone.

Border Radius
-> allows us to round the corners of an element.
-> accepts the length units i.e. percentages and pixels which identifies the radius by which corners of an element are to
be rounded.
* A single unit rounds all the four corners of an element equally;
* Two values will round the top-left/bottom-right and top-right/bottom-left in that order.
*four values will round the top-left, top-right,bottom-right and bottom-left in that order (clockwise fashion)
* long-hand 
-> The border-radius property may also be broken out into longhand properties that allow us to change the radii of individual corners of an element.
Example
div {
  border-top-right-radius: 5px;
}


Box Sizing
-> Until recently, box model has been an additive design where support we set a width of say 400px.
To get the actual width, we need to add 400px(width set) + 20px (padding-top) + border(6px)

-> The box model may however be changed to support different calculations.
-> BOX-SIZING property introduced in CSS3 allows us to change exactly how the box model works and how
an element size is calculated.

A. Content Box
-> The content-box value is the default value, leaving the box model as an additive design.
-> If we don't use the box-sizing property, this will be the default value for all elements.
-> The size of an element begins with the width and height properties and then any padding, border or margin
property are added.

div {
  -webkit-box-sizing: content-box;
     -moz-box-sizing: content-box;
          box-sizing: content-box;
}

Vendor Prefixes
As CSS3 was introduced , browsers gradually began to support different properties and values including box-sizing property
by way of vendor prefixes.
However as CSS3 specifications are finalized, and new browser versions are released, these vendor prefixes become less and less relevant.
-> As time goes on, vendor prefixes are unlikely to be a problem but are still useful in providing support for some old browsers that leveraged them.

Most common vendor prefixes are;
a. Mozilla firefox -moz-
b. Microsoft Internet Explorer -ms-
c. Webkit (Google Chrome and Apple Safari) -webkit-

B. Padding Box
-> The Padding Box alters the Box model by including any padding property values within the width and height of an element.
-> When using padding-box value, if an element has a width of 400px and a padding of 20px around every side, the actual width 
will remain 400px.
-> As any padding values increases, the content size within an element shrinks proportionately.

-> If we add a BORDER or a MARGIN, those values will be added to the width or height properties to calculate the full box size.

NOTE;
The padding-box value has been deprecated and should not be used.

C. Border Box
The border-box value alters the box model so that any BORDER or PADDING property are included within the width and height of an element.
-> Thus for example if we have a width set to 400px, a padding of 20px around every side , a border of 10px around every side, the actual width will remain 400px.
-> If we add a margin, those values will need to be added to calculate the full box size..
-> No matter which box-sizing property is used , any margin values will need to be added to calculate the full size of the element.

Picking a Box Size
- Generally speaking, the best box-sizing value to use is border-box.
-> It makes our math much easier. For example, if we want our element to
be 400px wide, it will remain 400px no matter what padding or border values we add to it.
Problem -> lacks support in older browsers.

Example
.container {
  width: 960px;
  padding: 0 30px;
  margin: 0 auto; //when used in conjuction with the width, lets the browser automatically figure out equal left and right margins for the element, thus centering it on a page
  padding-left: 30px;
  padding-right: 30px;
}

-> padding left and right ensures that out content isn't directly on the edge of the element and provides a little breathing room for the content.






















