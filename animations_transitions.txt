TRANSITIONS AND ANIMATIONS.
-> Animations with CSS3 allows the appearance and behaviour of an element to be altered in multiple keyframes.
-> "Transitions" provide a change from one state to another while "animations" can set multiple points of transition upon different keyframes.

Transitions
-> For "transition" to take place, an element must have a change in state and different styles must be identified for each state.
-> The easiest way for determining styles for different states is by using the :hover, :focus, :active and :target pseudo-classes.

Transition properties
* transition-property
* transition-duration
* transition-timing-function
* transition-delay

-> The first three are the most popular.

NOTE; For the best support across all browsers however,
use vendor prefixes

Example;
.box {
    background: #2db34a;
    -webkit-transition-property: background;
       -moz-transition-property: background;
         -o-transition-property: background;
            transition-property: background;
    -webkit-transition-duration: 1s;
       -moz-transition-duration: 1s;
         -o-transition-duration: 1s;
            transition-duration: 1s;
    -webkit-transition-timing-function: linear;
       -moz-transition-timing-function: linear;
         -o-transition-timing-function: linear;
            transition-timing-function: linear;
}
.box:hover {
  background: #ff7b29;
}

a. Transitional Property
-> By default, "transition-property" determines exactly what properties will be altered in conjuction with other transitional properties.
-> By default, all of the properties within an element's "different state" will be altered upon change.

-> However, only the properties identified within the "transition-property" value will be affected by any transition.

For example, in the case above, the "background"-property is identified in the "transition-property" value.
-> Here, the "background" property is the only property that will change over the "duration" of "1 second" in a "linear" fashion.
-> Any other properties included when changing an element's state but not included within the "transition" property value will not receive the transition behaviours as set by the "transition-duration" or the "transition-timing-functions" properties.

=> If multiple properties need to be transitioned, they may be comma separated within the "transition-property" value.
=> Additionaly the keyword "all" may be used to transition all properties of an element.

Transitional Properties
-> Not all of the CSS properties can be transitioned.
-> Only those properties that have an identifiable halfway point.
-> "colors", "font-sizes" and the alike may be transitioned from one value to another as they have recognizable values in between one another.
-> The "display" property does not have any midpoint thus cannot be transitioned.

Examples of properties that can be transitioned include;

background-color
background-position
border-color
border-width
border-spacing
bottom
clip
color
crop
font-size
font-weight
height
left
letter-spacing
line-height
margin
max-height
max-width
min-height
min-width
opacity
outline-color
outline-offset
outline-width
padding
right
text-indent
text-shadow
top
vertical-align
visibility
width
word-spacing
z-index

b. Transition duration
-> "transition-duration" used to set the duration in which a transition takes place.
-> The value for this property can be set using general timing values including "seconds (s)", and "milliseconds (ms)".
-> These timing values may also come in fractional measurements i.e. .2s for example.
-> When transitioning multiple properties you can set multiple durations, one for each property.
-> As with the "transition-property" value, multiple durations can be declared using comma separated values.
NOTE;
-> The order of these values matter. For example, the first property identified within the "transition-property" will match up with the first time identified within the "transition-duration" property.

-> If multiple properties are being transitioned with only one duration value decalred, that one value will be the duration of
all the transitioned properties.

c. Transition Timing
-> "transition-timing-function" is used to set the speed in which a transition will move.
-> Knowing the duration from "transition-duration" property, a transition can have multiple speeds within a single duration.
-> Some of the values for "transition-timing-function" include;

* "linear" -> identifies a transition moving in a constant speed  from one state to another.
* "ease-in" -> identifies a transition that starts slowly and speeds up througout the transition.
* "ease-out" -> transitions that starts quickly and slows down throughout the transition.
* "ease-in-out" -> identifies a transition that starts slowly, speeds up in the middle, then slows down again before ending".

Each timing function has a "cubic-bezier curve" behind it, which can be specifically set using the "cubic-bezier(x1, y1, x2, y2)".
-> Additional values include;
* step-start
* step-stop
* and a uniquely identified "steps(number_of_steps, direction)".

When transitioning multiple properties, you can have multiple timing functions.
-> These timing function values as with other transition property values may be declared as comma separated values.

Example

.box {
  background: #2db34a;
  border-radius: 6px;
  transition-property: background, border-radius;
  transition-duration: .2s, 1s;
  transition-timing-function: linear, ease-in;
}
.box:hover {
  background: #ff7b29;
  border-radius: 50%;
}

d. Transition Delay
-> On top of declaring the transition property, duration and timing function, you can also set a delay with the "transition-delay" property.
->  The delay sets a time value,seconds or milliseconds that determines how long a transition should be stalled before executing.
-> As with all other transition properties properties, to delay numerous transitions , each delay can be declared as comma separated values.


Shorthand Transitions
-> Declaring every transition property with vendor prefixes can become quite intensive, especially with vendor prefixes.
-> Fortunately there is a shorthand property, "transition" capable of supporting all these different properties and values.
-> Using the "transition" value alone, you can set every transition value in the order of;
  * transition-property, transition-duration,transition-timing-function,transition-delay.

NOTE; Do not use commas with these values unless you are identifying numerous transitions.

Animations
-> Transitions do a great job of building out visual interactions from one state to another and are perfect for these kind of single state changes.
-> However, when more control is needed, transitions need to have multiple states.
-> In return, this is where "animations" pick up where transitions leave off.

Animation Keyframes
=> To set multiple points at which an element should undergo a transition use the @keyframes rule.
-> The @keyframes rule includes includes the "animation name", "any animation breakpoints" and the properties intended to be animated.

Example

@keyframes slide {
  0% {
    left: 0;
    top: 0;
  }
  50% {
    left: 244px;
    top: 100px;
  }
  100% {
    left: 488px;
    top: 0;
  }
}

Vendor Prefixing
=> The "@keyframes" rule ,must be vendor prefixed just like other "transition" and "animation" properties.
-> Might look like;

@-moz-keyframes
@-webkit-keyframes
@-o-keyframes

NOTE; As with transitions, only individual properties may be animated.
-> Consider how you might move an element from top to bottom from example.
-> Trying to animate from top:0 to bottom: 0 will not work because animations can only apply a transition within a single property
not from one property to another.
-> In this case, elements will need to be animated from top: 0 to top: 100%;


Animation Duration, Timing function and Delay
-> Once you have declared the "animation-name" property on an element, animations behave similarly to transitions.
-> They include "duration", "timing function" and "delay" if desired.

Customizing Animations
-> Animations provide the ability to further customize an element's behaviour including the ability to declare the number of times an animation runs as well as the direction in which animation completes.

Animation Iteration
-> By default, animations run their cycle once from beggining to the end and then stop.
-> To have an animation repeate itself severally, the "animation-iteration-count" property may be used.
Values for the "animation-iteration-count" property include either an integer or the "infinite" keyword.
-> Using an integer will repeate the animation an many times as specified, while the "infinite" keyword will repeat the animation indefinately in never ending 

Animation Direction
*Possible values for "animation-direction" include;

 -> normal - plays animation as intended from beginning to the end.
 -> reverse - plays animation exactly opposite as identified within the "@keyframes" rule
thus starting at 100% and working backwords to 0%.
 -> alternate - plays animation forward then backwords i.e. from 0% - 100% then backwords from 100% - 0%.
=> Using the "animation-iteration-count" property may limit the number of times an animation runs both forward and backword.
=> The "alternate" value also inverses any timing functions  when playing in reverse. If an animation uses the "ease-in" value
going from 0% to 100%, it then uses the "ease-out" value going from "100%" to 0%.
 -> alternate-reverse -> combines both the "alternate" and "reverse" running animation both backwords then forwards i.e.
100% to 0% then back to 100% again.

Animation Play State
The animation-play-state property allows an animation to be played or paused using the "running" and "paused" keyword values respectively.
-> When you play a paused animation, it will resume running from it's current state rather than starting from the very beggining.

Animation Fill Mode
-> The animation-fill-mode property identifies how an element should be styled either "before","after", or "before" and "after" animation runs.
-> The animation-fill-mode property accepts four keyword values including;
a. "none" -> will not apply any styles to an element before or after an animation has been run.
b. "forward" -> will keep the styles declared within the last specified keyframe.
-> These styles however may be affected by the "animation-direction" and "animation-iteration-count".
c. "backwards" -> Will apply the styles within the first specified keyframe as soon as being identified before animation has been run.
-> This does include applying those styles during any time that may be set within an animation delay.
-> The backwards value may also be affected by animation-direction property value.
d. "both" -> apply the behaviours from both the forwards and backwords values.

Shorthand Animations
animation: animation-name,animation-duration,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,animation-fill-mode,animation-play-state;



 

 